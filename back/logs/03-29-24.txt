13:37:25    Cannot read properties of undefined (reading 'time') 
14:28:06    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:118:44

  115 console.log(data)
  116 console.log(socket.id, 'ID')
  117 // Checking if the user data exists and is valid
→ 118 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:28:06    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:118:44

  115 console.log(data)
  116 console.log(socket.id, 'ID')
  117 // Checking if the user data exists and is valid
→ 118 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:28:06    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:118:44

  115 console.log(data)
  116 console.log(socket.id, 'ID')
  117 // Checking if the user data exists and is valid
→ 118 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:28:06    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:118:44

  115 console.log(data)
  116 console.log(socket.id, 'ID')
  117 // Checking if the user data exists and is valid
→ 118 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:43:49    id is not defined 
14:44:53    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:118:44

  115 console.log(data)
  116 console.log(socket.id, 'ID')
  117 // Checking if the user data exists and is valid
→ 118 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:44:53    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:118:44

  115 console.log(data)
  116 console.log(socket.id, 'ID')
  117 // Checking if the user data exists and is valid
→ 118 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:44:53    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:118:44

  115 console.log(data)
  116 console.log(socket.id, 'ID')
  117 // Checking if the user data exists and is valid
→ 118 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:44:53    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:118:44

  115 console.log(data)
  116 console.log(socket.id, 'ID')
  117 // Checking if the user data exists and is valid
→ 118 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:44:53    
Invalid `prisma.user.findFirst()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Queries/UserQuery.js:44:48

  41 try {
  42   args = sanitise(args)
  43   // Get requested user's public information
→ 44   const specificUser = await prisma.user.findFirst(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:45:02    id is not defined 
14:54:19    Cannot read properties of undefined (reading 'time') 
14:55:47    
Invalid `prisma.user.findFirst()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Queries/UserQuery.js:43:43

  40 async resolve(parent, args, {prisma, sanitise, log}) {
  41   try {
  42     args = sanitise(args)
→ 43     const reqUser = await prisma.user.findFirst(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:59:25    Cannot read properties of undefined (reading 'time') 
15:28:01    Cannot read properties of undefined (reading 'time') 
15:47:01    Cannot read properties of undefined (reading 'time') 
15:47:10    Cannot read properties of undefined (reading 'time') 
15:56:31    Cannot read properties of undefined (reading 'time') 
17:02:24    Cannot read properties of undefined (reading 'time') 
17:08:25    Cannot read properties of undefined (reading 'time') 
17:08:41    Cannot read properties of undefined (reading 'time') 
17:13:20    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:118:44

  115 console.log(data)
  116 console.log(socket.id, 'ID')
  117 // Checking if the user data exists and is valid
→ 118 const exists = await prisma.userData.count(
Timed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 13) 
17:15:10    Cannot read properties of undefined (reading 'time') 
17:18:56    Cannot read properties of null (reading 'posts') 
17:18:59    Cannot read properties of null (reading 'posts') 
18:56:33    Cannot read properties of undefined (reading 'time') 
18:56:36    Cannot read properties of undefined (reading 'time') 
18:56:38    Cannot read properties of undefined (reading 'time') 
18:59:39    
Invalid `prisma.LikedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:187:34

  184   (inDepth.likedBy.length + 2) / inDepth.viewedBy.length + 1
  185 
  186 // Create a new record in the LikedPost table
→ 187 await prisma.LikedPost.create(
Unique constraint failed on the fields: (`postId`,`userId`) 
18:59:39    
Invalid `prisma.LikedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:187:34

  184   (inDepth.likedBy.length + 2) / inDepth.viewedBy.length + 1
  185 
  186 // Create a new record in the LikedPost table
→ 187 await prisma.LikedPost.create(
Unique constraint failed on the fields: (`postId`,`userId`) 
19:04:13    
Invalid `prisma.LikedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:187:34

  184   (inDepth.likedBy.length + 2) / inDepth.viewedBy.length + 1
  185 
  186 // Create a new record in the LikedPost table
→ 187 await prisma.LikedPost.create(
Unique constraint failed on the fields: (`postId`,`userId`) 
19:04:59    
Invalid `prisma.follow.delete()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:275:49

  272 })
  273 
  274 // Delete the follow request
→ 275 const r = await prisma.follow.delete(
An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist. 
19:06:05    
Invalid `prisma.follow.delete()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:275:49

  272 })
  273 
  274 // Delete the follow request
→ 275 const r = await prisma.follow.delete(
An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist. 
19:11:35    
Invalid `prisma.follow.delete()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:275:49

  272 })
  273 
  274 // Delete the follow request
→ 275 const r = await prisma.follow.delete(
An operation failed because it depends on one or more records that were required but not found. Record to delete does not exist. 
19:26:27    Cannot read properties of null (reading 'posts') 
20:14:26    Cannot read properties of null (reading 'posts') 
20:27:04    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
20:30:31    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
20:32:54    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
20:42:30    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
20:44:38    Cannot read properties of undefined (reading 'time') 
21:01:41    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
21:02:16    Cannot read properties of undefined (reading 'time') 
21:02:26    Cannot read properties of undefined (reading 'time') 
21:20:48    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
21:20:53    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Unique constraint failed on the fields: (`username`) 
21:21:16    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Unique constraint failed on the fields: (`username`) 
21:28:31    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Unique constraint failed on the fields: (`username`) 
21:28:39    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Unique constraint failed on the fields: (`username`) 
21:28:42    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Unique constraint failed on the fields: (`username`) 
21:28:43    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Unique constraint failed on the fields: (`username`) 
21:28:43    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Unique constraint failed on the fields: (`username`) 
21:28:54    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Unique constraint failed on the fields: (`username`) 
21:30:15    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Unique constraint failed on the fields: (`username`) 
21:31:22    id is not defined 
21:34:27    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args)
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Unique constraint failed on the fields: (`username`) 
21:35:18    Cannot read properties of undefined (reading 'time') 
21:43:11    Cannot read properties of undefined (reading 'time') 
21:57:33    
Invalid `prisma.user.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:34:40

  31 console.log(args, 'ARGS CREATE')
  32 
  33 // Create a new user in the database
→ 34 const user = await prisma.user.create(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
21:58:17    Cannot read properties of undefined (reading 'time') 
22:49:18    Cannot read properties of undefined (reading 'time') 
22:49:59    Cannot read properties of undefined (reading 'time') 
22:50:19    Cannot read properties of undefined (reading 'time') 
22:50:36    Cannot read properties of undefined (reading 'time') 
22:50:40    Cannot read properties of undefined (reading 'time') 
22:50:56    
Invalid `prisma.LikedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:187:34

  184   (inDepth.likedBy.length + 2) / inDepth.viewedBy.length + 1
  185 
  186 // Create a new record in the LikedPost table
→ 187 await prisma.LikedPost.create(
Unique constraint failed on the fields: (`postId`,`userId`) 
23:05:20    Cannot read properties of undefined (reading 'time') 
23:17:30    Cannot read properties of undefined (reading 'time') 
23:20:10    Cannot read properties of undefined (reading 'time') 
23:20:27    Cannot read properties of undefined (reading 'time') 
23:21:18    Cannot read properties of undefined (reading 'time') 
23:25:36    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update({
            where: {
              AND: [
                {
                  id: "ae4bb4fb-b0bd-4638-896a-b5beaf326915"
                },
                {
                  senderId: "b7a745f3-61ef-4f04-9994-b7ddb05fa9b5"
                }
              ],
          ?   id?: String,
          ?   OR?: MessageWhereInput[],
          ?   NOT?: MessageWhereInput | MessageWhereInput[],
          ?   content?: StringFilter | String,
          ?   senderId?: StringFilter | String,
          ?   date?: DateTimeFilter | DateTime,
          ?   read?: BoolFilter | Boolean,
          ?   type?: StringFilter | String,
          ?   chatroomId?: StringNullableFilter | String | Null,
          ?   sender?: UserRelationFilter | UserWhereInput,
          ?   chatroom?: ChatroomNullableRelationFilter | ChatroomWhereInput | Null
            },
            data: {
              content: "This message has been deleted"
            },
            select: {
              id: true,
              sender: {
                select: {
                  id: true,
                  username: true,
                  name: true
                }
              },
              content: true,
              type: true,
              date: true,
              read: true
            }
          })

Argument `where` of type MessageWhereUniqueInput needs at least one of `id` or `id` arguments. Available options are marked with ?. 
23:25:36    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update({
            where: {
              AND: [
                {
                  id: "ae4bb4fb-b0bd-4638-896a-b5beaf326915"
                },
                {
                  senderId: "b7a745f3-61ef-4f04-9994-b7ddb05fa9b5"
                }
              ],
          ?   id?: String,
          ?   OR?: MessageWhereInput[],
          ?   NOT?: MessageWhereInput | MessageWhereInput[],
          ?   content?: StringFilter | String,
          ?   senderId?: StringFilter | String,
          ?   date?: DateTimeFilter | DateTime,
          ?   read?: BoolFilter | Boolean,
          ?   type?: StringFilter | String,
          ?   chatroomId?: StringNullableFilter | String | Null,
          ?   sender?: UserRelationFilter | UserWhereInput,
          ?   chatroom?: ChatroomNullableRelationFilter | ChatroomWhereInput | Null
            },
            data: {
              content: "This message has been deleted"
            },
            select: {
              id: true,
              sender: {
                select: {
                  id: true,
                  username: true,
                  name: true
                }
              },
              content: true,
              type: true,
              date: true,
              read: true
            }
          })

Argument `where` of type MessageWhereUniqueInput needs at least one of `id` or `id` arguments. Available options are marked with ?. 
23:25:39    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update({
            where: {
              AND: [
                {
                  id: "ae4bb4fb-b0bd-4638-896a-b5beaf326915"
                },
                {
                  senderId: "d82da2c5-7c06-48c3-a75e-d92fad519132"
                }
              ],
          ?   id?: String,
          ?   OR?: MessageWhereInput[],
          ?   NOT?: MessageWhereInput | MessageWhereInput[],
          ?   content?: StringFilter | String,
          ?   senderId?: StringFilter | String,
          ?   date?: DateTimeFilter | DateTime,
          ?   read?: BoolFilter | Boolean,
          ?   type?: StringFilter | String,
          ?   chatroomId?: StringNullableFilter | String | Null,
          ?   sender?: UserRelationFilter | UserWhereInput,
          ?   chatroom?: ChatroomNullableRelationFilter | ChatroomWhereInput | Null
            },
            data: {
              content: "This message has been deleted"
            },
            select: {
              id: true,
              sender: {
                select: {
                  id: true,
                  username: true,
                  name: true
                }
              },
              content: true,
              type: true,
              date: true,
              read: true
            }
          })

Argument `where` of type MessageWhereUniqueInput needs at least one of `id` or `id` arguments. Available options are marked with ?. 
23:25:39    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update({
            where: {
              AND: [
                {
                  id: "ae4bb4fb-b0bd-4638-896a-b5beaf326915"
                },
                {
                  senderId: "d82da2c5-7c06-48c3-a75e-d92fad519132"
                }
              ],
          ?   id?: String,
          ?   OR?: MessageWhereInput[],
          ?   NOT?: MessageWhereInput | MessageWhereInput[],
          ?   content?: StringFilter | String,
          ?   senderId?: StringFilter | String,
          ?   date?: DateTimeFilter | DateTime,
          ?   read?: BoolFilter | Boolean,
          ?   type?: StringFilter | String,
          ?   chatroomId?: StringNullableFilter | String | Null,
          ?   sender?: UserRelationFilter | UserWhereInput,
          ?   chatroom?: ChatroomNullableRelationFilter | ChatroomWhereInput | Null
            },
            data: {
              content: "This message has been deleted"
            },
            select: {
              id: true,
              sender: {
                select: {
                  id: true,
                  username: true,
                  name: true
                }
              },
              content: true,
              type: true,
              date: true,
              read: true
            }
          })

Argument `where` of type MessageWhereUniqueInput needs at least one of `id` or `id` arguments. Available options are marked with ?. 
23:25:43    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update({
            where: {
              AND: [
                {
                  id: "ae4bb4fb-b0bd-4638-896a-b5beaf326915"
                },
                {
                  senderId: "d82da2c5-7c06-48c3-a75e-d92fad519132"
                }
              ],
          ?   id?: String,
          ?   OR?: MessageWhereInput[],
          ?   NOT?: MessageWhereInput | MessageWhereInput[],
          ?   content?: StringFilter | String,
          ?   senderId?: StringFilter | String,
          ?   date?: DateTimeFilter | DateTime,
          ?   read?: BoolFilter | Boolean,
          ?   type?: StringFilter | String,
          ?   chatroomId?: StringNullableFilter | String | Null,
          ?   sender?: UserRelationFilter | UserWhereInput,
          ?   chatroom?: ChatroomNullableRelationFilter | ChatroomWhereInput | Null
            },
            data: {
              content: "This message has been deleted"
            },
            select: {
              id: true,
              sender: {
                select: {
                  id: true,
                  username: true,
                  name: true
                }
              },
              content: true,
              type: true,
              date: true,
              read: true
            }
          })

Argument `where` of type MessageWhereUniqueInput needs at least one of `id` or `id` arguments. Available options are marked with ?. 
23:25:43    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update({
            where: {
              AND: [
                {
                  id: "ae4bb4fb-b0bd-4638-896a-b5beaf326915"
                },
                {
                  senderId: "d82da2c5-7c06-48c3-a75e-d92fad519132"
                }
              ],
          ?   id?: String,
          ?   OR?: MessageWhereInput[],
          ?   NOT?: MessageWhereInput | MessageWhereInput[],
          ?   content?: StringFilter | String,
          ?   senderId?: StringFilter | String,
          ?   date?: DateTimeFilter | DateTime,
          ?   read?: BoolFilter | Boolean,
          ?   type?: StringFilter | String,
          ?   chatroomId?: StringNullableFilter | String | Null,
          ?   sender?: UserRelationFilter | UserWhereInput,
          ?   chatroom?: ChatroomNullableRelationFilter | ChatroomWhereInput | Null
            },
            data: {
              content: "This message has been deleted"
            },
            select: {
              id: true,
              sender: {
                select: {
                  id: true,
                  username: true,
                  name: true
                }
              },
              content: true,
              type: true,
              date: true,
              read: true
            }
          })

Argument `where` of type MessageWhereUniqueInput needs at least one of `id` or `id` arguments. Available options are marked with ?. 
23:25:58    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update({
            where: {
              AND: [
                {
                  id: "ae4bb4fb-b0bd-4638-896a-b5beaf326915"
                },
                {
                  senderId: "d82da2c5-7c06-48c3-a75e-d92fad519132"
                }
              ],
          ?   id?: String,
          ?   OR?: MessageWhereInput[],
          ?   NOT?: MessageWhereInput | MessageWhereInput[],
          ?   content?: StringFilter | String,
          ?   senderId?: StringFilter | String,
          ?   date?: DateTimeFilter | DateTime,
          ?   read?: BoolFilter | Boolean,
          ?   type?: StringFilter | String,
          ?   chatroomId?: StringNullableFilter | String | Null,
          ?   sender?: UserRelationFilter | UserWhereInput,
          ?   chatroom?: ChatroomNullableRelationFilter | ChatroomWhereInput | Null
            },
            data: {
              content: "This message has been deleted"
            },
            select: {
              id: true,
              sender: {
                select: {
                  id: true,
                  username: true,
                  name: true
                }
              },
              content: true,
              type: true,
              date: true,
              read: true
            }
          })

Argument `where` of type MessageWhereUniqueInput needs at least one of `id` or `id` arguments. Available options are marked with ?. 
23:25:58    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update({
            where: {
              AND: [
                {
                  id: "ae4bb4fb-b0bd-4638-896a-b5beaf326915"
                },
                {
                  senderId: "d82da2c5-7c06-48c3-a75e-d92fad519132"
                }
              ],
          ?   id?: String,
          ?   OR?: MessageWhereInput[],
          ?   NOT?: MessageWhereInput | MessageWhereInput[],
          ?   content?: StringFilter | String,
          ?   senderId?: StringFilter | String,
          ?   date?: DateTimeFilter | DateTime,
          ?   read?: BoolFilter | Boolean,
          ?   type?: StringFilter | String,
          ?   chatroomId?: StringNullableFilter | String | Null,
          ?   sender?: UserRelationFilter | UserWhereInput,
          ?   chatroom?: ChatroomNullableRelationFilter | ChatroomWhereInput | Null
            },
            data: {
              content: "This message has been deleted"
            },
            select: {
              id: true,
              sender: {
                select: {
                  id: true,
                  username: true,
                  name: true
                }
              },
              content: true,
              type: true,
              date: true,
              read: true
            }
          })

Argument `where` of type MessageWhereUniqueInput needs at least one of `id` or `id` arguments. Available options are marked with ?. 
23:26:35    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found. 
23:26:35    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found. 
23:26:59    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found. 
23:26:59    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:234:44

  231 if (Object.keys(updateData).length > 0) {
  232   // Check so that only the sender can delete their message
  233   if (args.edit === 'delete') {
→ 234     const m = await prisma.message.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found. 
