07:11:07    
Invalid `.update()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:134:12

  131 } else {
  132   // If the user data is valid, update the user's socket ID and emit an 'auth' event with true
  133   await prisma.user
→ 134     .update({
            where: {
              id: undefined,
          ?   username?: String,
          ?   AND?: UserWhereInput | UserWhereInput[],
          ?   OR?: UserWhereInput[],
          ?   NOT?: UserWhereInput | UserWhereInput[],
          ?   name?: StringFilter | String,
          ?   avgRatio?: FloatFilter | Float,
          ?   multiplier?: FloatFilter | Float,
          ?   socket?: StringNullableFilter | String | Null,
          ?   lastUpdated?: DateTimeFilter | DateTime,
          ?   userData?: UserDataNullableRelationFilter | UserDataWhereInput | Null,
          ?   posts?: PostListRelationFilter,
          ?   viewedPosts?: ViewedPostListRelationFilter,
          ?   likedPosts?: LikedPostListRelationFilter,
          ?   friends?: FriendshipListRelationFilter,
          ?   friendshipsReceived?: FriendshipListRelationFilter,
          ?   following?: FollowListRelationFilter,
          ?   followers?: FollowListRelationFilter,
          ?   chatroomUsers?: ChatroomUserListRelationFilter,
          ?   Message?: MessageListRelationFilter
            },
            data: {
              socket: "odyW1bds5d38UuL8AAAD"
            }
          })

Argument `where` of type UserWhereUniqueInput needs at least one of `id` or `username` arguments. Available options are marked with ?. 
07:22:21    User not found 
07:39:09    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:215:42

  212 if (!session || req) {
  213   // If no session exists or a request is provided
  214   // Checking if the user data exists and is valid
→ 215   const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
07:39:32    Cannot read properties of null (reading 'follower') 
07:40:07    Cannot read properties of null (reading 'follower') 
07:40:37    Cannot read properties of null (reading 'follower') 
07:40:56    Cannot read properties of null (reading 'follower') 
07:42:04    Cannot read properties of null (reading 'follower') 
07:42:21    Cannot read properties of null (reading 'follower') 
07:42:50    Cannot read properties of null (reading 'follower') 
07:50:13    Cannot read properties of null (reading 'follower') 
07:50:47    Cannot read properties of null (reading 'follower') 
07:51:50    Cannot read properties of null (reading 'posts') 
07:52:06    Cannot read properties of null (reading 'posts') 
07:52:09    Cannot read properties of null (reading 'posts') 
07:52:18    Cannot read properties of null (reading 'posts') 
07:54:28    Cannot read properties of null (reading 'posts') 
07:54:31    Cannot read properties of null (reading 'posts') 
08:04:08    
Invalid `prisma.follow.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:288:33

  285 
  286 case 'remove':
  287   // Mark the follow request as denied
→ 288   await prisma.follow.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found. 
08:05:06    
Invalid `prisma.follow.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/UserMutations.js:286:43

  283 
  284 case 'remove':
  285   // Mark the follow request as denied
→ 286   const u = await prisma.follow.update(
An operation failed because it depends on one or more records that were required but not found. Record to update not found. 
08:06:38    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:215:42

  212 if (!session || req) {
  213   // If no session exists or a request is provided
  214   // Checking if the user data exists and is valid
→ 215   const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
10:31:49    
Invalid `prisma.user.findFirst()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Queries/UserQuery.js:51:31

  48   friendshipsReceived,
  49   followers,
  50   following,
→ 51 } = await prisma.user.findFirst(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
10:31:49    
Invalid `prisma.user.findFirst()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Queries/UserQuery.js:88:40

  85 async resolve(parent, args, {prisma, sanitise, log}) {
  86   try {
  87     args = sanitise(args)
→ 88     const user = await prisma.user.findFirst(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
10:31:49    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:117:44

  114 data = sanitise(data)
  115 console.log(data)
  116 // Checking if the user data exists and is valid
→ 117 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
10:31:49    
Invalid `prisma.user.findFirst()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Queries/UserQuery.js:88:40

  85 async resolve(parent, args, {prisma, sanitise, log}) {
  86   try {
  87     args = sanitise(args)
→ 88     const user = await prisma.user.findFirst(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
10:31:50    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:117:44

  114 data = sanitise(data)
  115 console.log(data)
  116 // Checking if the user data exists and is valid
→ 117 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
10:31:50    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:117:44

  114 data = sanitise(data)
  115 console.log(data)
  116 // Checking if the user data exists and is valid
→ 117 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
10:31:50    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:117:44

  114 data = sanitise(data)
  115 console.log(data)
  116 // Checking if the user data exists and is valid
→ 117 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
10:40:15    prisma is not defined 
10:40:55    prisma is not defined 
10:41:38    Invalid Credentials 
10:43:23    Invalid Credentials 
10:43:51    Invalid Credentials 
10:44:22    Invalid Credentials 
10:44:45    Invalid Credentials 
10:44:51    Invalid Credentials 
10:45:52    Invalid Credentials 
10:46:35    Invalid Credentials 
10:54:14    Invalid Credentials 
10:55:21    Invalid Credentials 
10:55:33    Invalid Credentials 
10:56:44    prisma is not defined 
10:59:00    prisma is not defined 
10:59:33    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:215:42

  212 if (!session || req) {
  213   // If no session exists or a request is provided
  214   // Checking if the user data exists and is valid
→ 215   const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
10:59:48    prisma is not defined 
11:00:17    prisma is not defined 
11:00:51    prisma is not defined 
11:01:07    prisma is not defined 
11:02:51    prisma is not defined 
11:03:15    prisma is not defined 
11:03:18    prisma is not defined 
11:03:33    prisma is not defined 
11:06:26    prisma is not defined 
11:07:03    prisma is not defined 
11:07:40    prisma is not defined 
11:07:48    prisma is not defined 
11:07:57    prisma is not defined 
11:08:09    prisma is not defined 
11:08:20    prisma is not defined 
11:08:37    prisma is not defined 
11:08:48    prisma is not defined 
11:08:55    prisma is not defined 
11:10:31    prisma is not defined 
11:11:07    prisma is not defined 
11:12:18    prisma is not defined 
11:15:08    
Invalid `prisma.viewedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:96:33

  93 
  94 const ratio = inDepth.likedBy.length / (inDepth.viewedBy.length + 1)
  95 
→ 96 await prisma.viewedPost.create({
       data: {
         postId: 4,
         userId: "393d7655-c7d5-4fbe-8351-554d11aa1fb2",
         avgRatio: 0
         ~~~~~~~~
       }
     })

Unknown argument `avgRatio`. Available options are marked with ?. 
11:17:08    
Invalid `prisma.viewedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:105:45

  102 const ratio = inDepth.likedBy.length / (inDepth.viewedBy.length + 1)
  103 
  104 // Create a new record in the ViewedPost table
→ 105 const v = await prisma.viewedPost.create({
        data: {
          postId: 4,
          userId: "393d7655-c7d5-4fbe-8351-554d11aa1fb2",
          avgRatio: 0
          ~~~~~~~~
        }
      })

Unknown argument `avgRatio`. Available options are marked with ?. 
11:18:00    
Invalid `prisma.viewedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:104:45

  101 const ratio = inDepth.likedBy.length / (inDepth.viewedBy.length + 1)
  102 
  103 // Create a new record in the ViewedPost table
→ 104 const v = await prisma.viewedPost.create({
        data: {
          postId: 4,
          userId: "393d7655-c7d5-4fbe-8351-554d11aa1fb2",
          avgRatio: 0
          ~~~~~~~~
        }
      })

Unknown argument `avgRatio`. Available options are marked with ?. 
11:18:22    
Invalid `prisma.viewedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:105:45

  102   inDepth.likedBy.length / (inDepth.viewedBy.length + 1) ?? 0
  103 
  104 // Create a new record in the ViewedPost table
→ 105 const v = await prisma.viewedPost.create({
        data: {
          postId: 4,
          userId: "393d7655-c7d5-4fbe-8351-554d11aa1fb2",
          avgRatio: 0
          ~~~~~~~~
        }
      })

Unknown argument `avgRatio`. Available options are marked with ?. 
11:18:35    
Invalid `prisma.viewedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:104:45

  101 const ratio = inDepth.likedBy.length / (inDepth.viewedBy.length + 1)
  102 
  103 // Create a new record in the ViewedPost table
→ 104 const v = await prisma.viewedPost.create({
        data: {
          postId: 4,
          userId: "393d7655-c7d5-4fbe-8351-554d11aa1fb2",
          avgRatio: 0
          ~~~~~~~~
        }
      })

Unknown argument `avgRatio`. Available options are marked with ?. 
11:18:48    
Invalid `prisma.viewedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:105:45

  102   inDepth.likedBy.length + 1 / (inDepth.viewedBy.length + 2)
  103 
  104 // Create a new record in the ViewedPost table
→ 105 const v = await prisma.viewedPost.create({
        data: {
          postId: 4,
          userId: "393d7655-c7d5-4fbe-8351-554d11aa1fb2",
          avgRatio: 0.5
          ~~~~~~~~
        }
      })

Unknown argument `avgRatio`. Available options are marked with ?. 
11:18:57    
Invalid `prisma.viewedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:105:45

  102   inDepth.likedBy.length + 1 / (inDepth.viewedBy.length + 2)
  103 
  104 // Create a new record in the ViewedPost table
→ 105 const v = await prisma.viewedPost.create({
        data: {
          postId: 4,
          userId: "393d7655-c7d5-4fbe-8351-554d11aa1fb2",
          avgRatio: 0.5
          ~~~~~~~~
        }
      })

Unknown argument `avgRatio`. Available options are marked with ?. 
11:19:19    
Invalid `prisma.viewedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:107:45

  104 console.log(ratio, 'RATIO')
  105 
  106 // Create a new record in the ViewedPost table
→ 107 const v = await prisma.viewedPost.create({
        data: {
          postId: 4,
          userId: "393d7655-c7d5-4fbe-8351-554d11aa1fb2",
          avgRatio: 0.5
          ~~~~~~~~
        }
      })

Unknown argument `avgRatio`. Available options are marked with ?. 
11:20:41    
Invalid `prisma.ViewedPost.create()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:107:45

  104 console.log(ratio, 'RATIO')
  105 
  106 // Create a new record in the ViewedPost table
→ 107 const v = await prisma.ViewedPost.create({
        data: {
          postId: 4,
          userId: "393d7655-c7d5-4fbe-8351-554d11aa1fb2",
          avgRatio: 0.5
          ~~~~~~~~
        }
      })

Unknown argument `avgRatio`. Available options are marked with ?. 
11:29:52    Cannot read properties of null (reading 'viewedBy') 
11:48:45    Invalid Credentials 
11:49:09    Cannot read properties of null (reading 'likedBy') 
11:49:19    
Invalid `prisma.post.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:192:29

  189   },
  190 })
  191 
→ 192 await prisma.post.update({
        where: {
          id: 10
        },
        data: {
      +   avgRatio: Float
        }
      })

Argument `avgRatio` is missing. 
11:49:35    
Invalid `prisma.post.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:192:29

  189   },
  190 })
  191 
→ 192 await prisma.post.update({
        where: {
          id: 2
        },
        data: {
      +   avgRatio: Float
        }
      })

Argument `avgRatio` is missing. 
11:49:53    Cannot read properties of null (reading 'likedBy') 
11:50:02    
Invalid `prisma.post.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:192:29

  189   },
  190 })
  191 
→ 192 await prisma.post.update({
        where: {
          id: 11
        },
        data: {
      +   avgRatio: Float
        }
      })

Argument `avgRatio` is missing. 
11:50:07    
Invalid `prisma.post.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/PostMutations.js:192:29

  189   },
  190 })
  191 
→ 192 await prisma.post.update({
        where: {
          id: 7
        },
        data: {
      +   avgRatio: Float
        }
      })

Argument `avgRatio` is missing. 
12:06:46    Cannot read properties of null (reading 'posts') 
12:06:46    Cannot destructure property 'id' of '(intermediate value)' as it is null. 
12:06:46    Cannot read properties of null (reading 'posts') 
12:06:47    Cannot read properties of null (reading 'posts') 
12:06:47    Cannot destructure property 'id' of '(intermediate value)' as it is null. 
12:06:47    Cannot read properties of null (reading 'posts') 
12:06:48    Cannot read properties of null (reading 'posts') 
12:08:50    Cannot read properties of null (reading 'posts') 
12:39:20    auth is not defined 
12:41:03    auth is not defined 
12:45:39    auth is not defined 
12:45:44    auth is not defined 
12:46:08    auth is not defined 
12:46:16    auth is not defined 
12:54:44    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:232:42

  229 
  230 // Update the message if necessary
  231 if (Object.keys(updateData).length > 0) {
→ 232   const m = await prisma.message.update({
          where: {
            AND: [
              {
                id: "fb191ca8-1484-433c-8d35-874e34e0670c"
              },
              {
                senderId: "393d7655-c7d5-4fbe-8351-554d11aa1fb2"
              }
            ],
        ?   id?: String,
        ?   OR?: MessageWhereInput[],
        ?   NOT?: MessageWhereInput | MessageWhereInput[],
        ?   content?: StringFilter | String,
        ?   senderId?: StringFilter | String,
        ?   date?: DateTimeFilter | DateTime,
        ?   read?: BoolFilter | Boolean,
        ?   type?: StringFilter | String,
        ?   chatroomId?: StringNullableFilter | String | Null,
        ?   sender?: UserRelationFilter | UserWhereInput,
        ?   chatroom?: ChatroomNullableRelationFilter | ChatroomWhereInput | Null
          },
          data: {
            content: "This message has been deleted"
          }
        })

Argument `where` of type MessageWhereUniqueInput needs at least one of `id` or `id` arguments. Available options are marked with ?. 
12:55:00    
Invalid `prisma.message.update()` invocation in
/home/mute/Documents/js/new-nea/back/schemas/Mutations/ChatroomMutations.js:232:42

  229 
  230 // Update the message if necessary
  231 if (Object.keys(updateData).length > 0) {
→ 232   const m = await prisma.message.update({
          where: {
            AND: [
              {
                id: "fb191ca8-1484-433c-8d35-874e34e0670c"
              },
              {
                senderId: "393d7655-c7d5-4fbe-8351-554d11aa1fb2"
              }
            ],
        ?   id?: String,
        ?   OR?: MessageWhereInput[],
        ?   NOT?: MessageWhereInput | MessageWhereInput[],
        ?   content?: StringFilter | String,
        ?   senderId?: StringFilter | String,
        ?   date?: DateTimeFilter | DateTime,
        ?   read?: BoolFilter | Boolean,
        ?   type?: StringFilter | String,
        ?   chatroomId?: StringNullableFilter | String | Null,
        ?   sender?: UserRelationFilter | UserWhereInput,
        ?   chatroom?: ChatroomNullableRelationFilter | ChatroomWhereInput | Null
          },
          data: {
            read: true
          }
        })

Argument `where` of type MessageWhereUniqueInput needs at least one of `id` or `id` arguments. Available options are marked with ?. 
14:03:24    Password is incorrect 
14:04:03    Password is incorrect 
14:04:18    Password is incorrect 
14:04:36    Password is incorrect 
14:31:13    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:117:44

  114 data = sanitise(data)
  115 console.log(data)
  116 // Checking if the user data exists and is valid
→ 117 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:31:13    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:117:44

  114 data = sanitise(data)
  115 console.log(data)
  116 // Checking if the user data exists and is valid
→ 117 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:31:13    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:117:44

  114 data = sanitise(data)
  115 console.log(data)
  116 // Checking if the user data exists and is valid
→ 117 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
14:31:13    
Invalid `prisma.userData.count()` invocation in
/home/mute/Documents/js/new-nea/back/index.js:117:44

  114 data = sanitise(data)
  115 console.log(data)
  116 // Checking if the user data exists and is valid
→ 117 const exists = await prisma.userData.count(
Can't reach database server at `postgdb.postgres.database.azure.com`:`5432`

Please make sure your database server is running at `postgdb.postgres.database.azure.com`:`5432`. 
